import { CommonField } from './chess-field'
describe('Testing common chess-field', () => {

    test('testing field', () => {
        let f = CommonField.fromNotation('a1')
        expect(f.file).toBe('a')
        expect(f.rank).toBe(1)
        expect(f.notation).toBe('a1')
        expect(f.fileIdx).toBe(0)
        expect(f.rankIdx).toBe(7)
        expect(f.fieldIdx).toBe(56)

        f = CommonField.fromNotation('h8')
        expect(f.file).toBe('h')
        expect(f.rank).toBe(8)
        expect(f.notation).toBe('h8')
        expect(f.fileIdx).toBe(7)
        expect(f.rankIdx).toBe(0)
        expect(f.fieldIdx).toBe(7)

        f = CommonField.fromNotation('h1')
        expect(f.file).toBe('h')
        expect(f.rank).toBe(1)
        expect(f.notation).toBe('h1')
        expect(f.fileIdx).toBe(7)
        expect(f.rankIdx).toBe(7)
        expect(f.fieldIdx).toBe(63)

        f = CommonField.fromIdx(7, 7)
        expect(f.file).toBe('h')
        expect(f.rank).toBe(1)
        expect(f.notation).toBe('h1')
        expect(f.fileIdx).toBe(7)
        expect(f.rankIdx).toBe(7)
        expect(f.fieldIdx).toBe(63)

        f = CommonField.fromFieldIdx(56)
        expect(f.file).toBe('a')
        expect(f.rank).toBe(1)
        expect(f.notation).toBe('a1')
        expect(f.fileIdx).toBe(0)
        expect(f.rankIdx).toBe(7)
        expect(f.fieldIdx).toBe(56)

        f = CommonField.fromFieldIdx(63)
        expect(f.file).toBe('h')
        expect(f.rank).toBe(1)
        expect(f.notation).toBe('h1')
        expect(f.fileIdx).toBe(7)
        expect(f.rankIdx).toBe(7)
        expect(f.fieldIdx).toBe(63)

        f = new CommonField()
        expect(f.file).toBeUndefined()
        expect(f.rank).toBeUndefined()
        expect(() => f.notation).toThrowError(Error)
        expect(() => f.fileIdx).toThrowError(Error)
        expect(() => f.rankIdx).toThrowError(Error)
        expect(() => f.fieldIdx).toThrowError(Error)

        expect(() => new CommonField('x', 1)).toThrowError(Error)
        expect(() => new CommonField('A', 1)).toThrowError(Error)
        expect(() => new CommonField('e', 0)).toThrowError(Error)
        expect(() => new CommonField('e', 9)).toThrowError(Error)
        expect(() => CommonField.fromIdx(8, 0)).toThrowError(Error)
        expect(() => CommonField.fromIdx(0, 8)).toThrowError(Error)
        expect(() => CommonField.fromIdx(5, -1)).toThrowError(Error)
        expect(() => CommonField.fromIdx(-1, 4)).toThrowError(Error)
        expect(() => CommonField.fromFieldIdx(64)).toThrowError(Error)
        expect(() => CommonField.fromFieldIdx(-1)).toThrowError(Error)

    })
})