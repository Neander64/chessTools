import { CommonField, CommonFieldFR } from './chess-field'
describe('Testing common chess-field', () => {

    test('testing CommonField (set values)', () => {
        let f = CommonField.fromNotation('a1')
        expect(f.isOnBoard).toBe(true)
        expect(f.file).toBe('a')
        expect(f.rank).toBe(1)
        expect(f.notation).toBe('a1')
        expect(f.fileIdx).toBe(0)
        expect(f.rankIdx).toBe(7)
        expect(f.field063Idx).toBe(56)

        f = CommonField.fromNotation('h8')
        expect(f.isOnBoard).toBe(true)
        expect(f.file).toBe('h')
        expect(f.rank).toBe(8)
        expect(f.notation).toBe('h8')
        expect(f.fileIdx).toBe(7)
        expect(f.rankIdx).toBe(0)
        expect(f.field063Idx).toBe(7)

        f = CommonField.fromNotation('h1')
        expect(f.isOnBoard).toBe(true)
        expect(f.file).toBe('h')
        expect(f.rank).toBe(1)
        expect(f.notation).toBe('h1')
        expect(f.fileIdx).toBe(7)
        expect(f.rankIdx).toBe(7)
        expect(f.field063Idx).toBe(63)

        f = CommonField.fromFR('h', 1)
        expect(f.isOnBoard).toBe(true)
        expect(f.file).toBe('h')
        expect(f.rank).toBe(1)
        expect(f.notation).toBe('h1')
        expect(f.fileIdx).toBe(7)
        expect(f.rankIdx).toBe(7)
        expect(f.field063Idx).toBe(63)

        f = CommonField.fromN({ file: 'h', rank: 1 })
        expect(f.isOnBoard).toBe(true)
        expect(f.file).toBe('h')
        expect(f.rank).toBe(1)
        expect(f.notation).toBe('h1')
        expect(f.fileIdx).toBe(7)
        expect(f.rankIdx).toBe(7)
        expect(f.field063Idx).toBe(63)

        f = CommonField.fromI(7, 7)
        expect(f.isOnBoard).toBe(true)
        expect(f.file).toBe('h')
        expect(f.rank).toBe(1)
        expect(f.notation).toBe('h1')
        expect(f.fileIdx).toBe(7)
        expect(f.rankIdx).toBe(7)
        expect(f.field063Idx).toBe(63)

        f = CommonField.fromFieldIdx({ fileIdx: 7, rankIdx: 7 })
        expect(f.isOnBoard).toBe(true)
        expect(f.file).toBe('h')
        expect(f.rank).toBe(1)
        expect(f.notation).toBe('h1')
        expect(f.fileIdx).toBe(7)
        expect(f.rankIdx).toBe(7)
        expect(f.field063Idx).toBe(63)

        f = CommonField.fromField063Idx(56)
        expect(f.isOnBoard).toBe(true)
        expect(f.file).toBe('a')
        expect(f.rank).toBe(1)
        expect(f.notation).toBe('a1')
        expect(f.fileIdx).toBe(0)
        expect(f.rankIdx).toBe(7)
        expect(f.field063Idx).toBe(56)

        f = CommonField.fromField063Idx(63)
        expect(f.isOnBoard).toBe(true)
        expect(f.file).toBe('h')
        expect(f.rank).toBe(1)
        expect(f.fieldN).toMatchObject({ file: 'h', rank: 1 })
        expect(f.notation).toBe('h1')
        expect(f.fileIdx).toBe(7)
        expect(f.rankIdx).toBe(7)
        expect(f.fieldIdx).toMatchObject({ fileIdx: 7, rankIdx: 7 })
        expect(f.field063Idx).toBe(63)
    })

    test('testing CommonField (Error handling)', () => {
        let f = new CommonField()
        expect(f.isOnBoard).toBe(false)
        expect(() => f.file).toThrowError(Error)
        expect(() => f.rank).toThrowError(Error)
        expect(() => f.fieldN).toThrowError(Error)
        expect(() => f.notation).toThrowError(Error)
        expect(() => f.fileIdx).toThrowError(Error)
        expect(() => f.rankIdx).toThrowError(Error)
        expect(() => f.fieldIdx).toThrowError(Error)
        expect(() => f.field063Idx).toThrowError(Error)

        expect(new CommonField(8, 1).isOnBoard).toBe(false)
        expect(new CommonField(-1, 1).isOnBoard).toBe(false)
        expect(new CommonField(2, -1).isOnBoard).toBe(false)
        expect(new CommonField(7, 8).isOnBoard).toBe(false)
        expect(CommonField.fromI(8, 0).isOnBoard).toBe(false)
        expect(CommonField.fromI(0, 8).isOnBoard).toBe(false)
        expect(CommonField.fromI(5, -1).isOnBoard).toBe(false)
        expect(CommonField.fromI(-1, 4).isOnBoard).toBe(false)
        expect(CommonField.fromField063Idx(64).isOnBoard).toBe(false)
        expect(CommonField.fromField063Idx(-1).isOnBoard).toBe(false)
    })

    test('testing CommonField (comparing)', () => {
        let f1 = new CommonField()
        let f2 = new CommonField()
        expect(() => f1.same(f2)).toThrowError(Error)
        expect(() => f1.sameFR(f2.file, f2.rank)).toThrowError(Error)
        expect(() => f1.sameN(f2.fieldN)).toThrowError(Error)
        expect(() => f1.sameNotation(f2.notation)).toThrowError(Error)
        expect(() => f1.sameI(f2.fileIdx, f2.rankIdx)).toThrowError(Error)
        expect(() => f1.sameIdx(f2.fieldIdx)).toThrowError(Error)
        expect(() => f1.same063I(f2.field063Idx)).toThrowError(Error)

        f2 = CommonField.fromNotation('d4')
        expect(() => f1.same(f2)).toThrowError(Error)
        expect(() => f1.sameFR(f2.file, f2.rank)).toThrowError(Error)
        expect(() => f1.sameN(f2.fieldN)).toThrowError(Error)
        expect(() => f1.sameNotation(f2.notation)).toThrowError(Error)
        expect(() => f1.sameI(f2.fileIdx, f2.rankIdx)).toThrowError(Error)
        expect(() => f1.sameIdx(f2.fieldIdx)).toThrowError(Error)
        expect(() => f1.same063I(f2.field063Idx)).toThrowError(Error)

        f1 = CommonField.fromNotation('d4')
        f2 = new CommonField()
        expect(f1.same(f2)).toBe(false)
        expect(() => f1.sameFR(f2.file, f2.rank)).toThrowError(Error)
        expect(() => f1.sameN(f2.fieldN)).toThrowError(Error)
        expect(() => f1.sameNotation(f2.notation)).toThrowError(Error)
        expect(() => f1.sameI(f2.fileIdx, f2.rankIdx)).toThrowError(Error)
        expect(() => f1.sameIdx(f2.fieldIdx)).toThrowError(Error)
        expect(() => f1.same063I(f2.field063Idx)).toThrowError(Error)

        f1 = CommonField.fromNotation('d4')
        f2 = new CommonField(f1.fileIdx, f1.rankIdx)
        expect(f1.same(f2)).toBe(true)
        expect(f1.sameFR(f2.file, f2.rank)).toBe(true)
        expect(f1.sameN(f2.fieldN)).toBe(true)
        expect(f1.sameNotation(f2.notation)).toBe(true)
        expect(f1.sameI(f2.fileIdx, f2.rankIdx)).toBe(true)
        expect(f1.sameIdx(f2.fieldIdx)).toBe(true)
        expect(f1.same063I(f2.field063Idx)).toBe(true)

        f1 = CommonField.fromNotation('a1')
        f2 = CommonField.fromNotation('a1')
        expect(f1.same(f2)).toBe(true)
        expect(f1.sameFR(f2.file, f2.rank)).toBe(true)
        expect(f1.sameN(f2.fieldN)).toBe(true)
        expect(f1.sameNotation(f2.notation)).toBe(true)
        expect(f1.sameI(f2.fileIdx, f2.rankIdx)).toBe(true)
        expect(f1.sameIdx(f2.fieldIdx)).toBe(true)
        expect(f1.same063I(f2.field063Idx)).toBe(true)
        f1 = CommonField.fromNotation('a1')
        f2 = CommonField.fromNotation('a2')
        expect(f1.same(f2)).toBe(false)
        expect(f1.sameFR(f2.file, f2.rank)).toBe(false)
        expect(f1.sameN(f2.fieldN)).toBe(false)
        expect(f1.sameNotation(f2.notation)).toBe(false)
        expect(f1.sameI(f2.fileIdx, f2.rankIdx)).toBe(false)
        expect(f1.sameIdx(f2.fieldIdx)).toBe(false)
        expect(f1.same063I(f2.field063Idx)).toBe(false)

        f1 = CommonField.fromNotation('a1')
        f2 = CommonField.fromField063Idx(56)
        expect(f1.same(f2)).toBe(true)
        expect(f1.sameFR(f2.file, f2.rank)).toBe(true)
        expect(f1.sameN(f2.fieldN)).toBe(true)
        expect(f1.sameNotation(f2.notation)).toBe(true)
        expect(f1.sameI(f2.fileIdx, f2.rankIdx)).toBe(true)
        expect(f1.sameIdx(f2.fieldIdx)).toBe(true)
        expect(f1.same063I(f2.field063Idx)).toBe(true)
        f1 = CommonField.fromNotation('a1')
        f2 = CommonField.fromField063Idx(54)
        expect(f1.same(f2)).toBe(false)
        expect(f1.sameFR(f2.file, f2.rank)).toBe(false)
        expect(f1.sameN(f2.fieldN)).toBe(false)
        expect(f1.sameNotation(f2.notation)).toBe(false)
        expect(f1.sameI(f2.fileIdx, f2.rankIdx)).toBe(false)
        expect(f1.sameIdx(f2.fieldIdx)).toBe(false)
        expect(f1.same063I(f2.field063Idx)).toBe(false)

        f1 = CommonField.fromNotation('a1')
        f2 = CommonField.fromI(0, 7)
        expect(f1.same(f2)).toBe(true)
        expect(f1.sameFR(f2.file, f2.rank)).toBe(true)
        expect(f1.sameN(f2.fieldN)).toBe(true)
        expect(f1.sameNotation(f2.notation)).toBe(true)
        expect(f1.sameI(f2.fileIdx, f2.rankIdx)).toBe(true)
        expect(f1.sameIdx(f2.fieldIdx)).toBe(true)
        expect(f1.same063I(f2.field063Idx)).toBe(true)
        f1 = CommonField.fromNotation('a1')
        f2 = CommonField.fromI(0, 6)
        expect(f1.same(f2)).toBe(false)
        expect(f1.sameFR(f2.file, f2.rank)).toBe(false)
        expect(f1.sameN(f2.fieldN)).toBe(false)
        expect(f1.sameNotation(f2.notation)).toBe(false)
        expect(f1.sameI(f2.fileIdx, f2.rankIdx)).toBe(false)
        expect(f1.sameIdx(f2.fieldIdx)).toBe(false)
        expect(f1.same063I(f2.field063Idx)).toBe(false)

    })

    test('testing CommonFieldFR (set values)', () => {
        let f = CommonFieldFR.fromNotation('a1')
        expect(f.isOnBoard).toBe(true)
        expect(f.file).toBe('a')
        expect(f.rank).toBe(1)
        expect(f.notation).toBe('a1')
        expect(f.fileIdx).toBe(0)
        expect(f.rankIdx).toBe(7)
        expect(f.field063Idx).toBe(56)

        f = CommonFieldFR.fromNotation('h8')
        expect(f.isOnBoard).toBe(true)
        expect(f.file).toBe('h')
        expect(f.rank).toBe(8)
        expect(f.notation).toBe('h8')
        expect(f.fileIdx).toBe(7)
        expect(f.rankIdx).toBe(0)
        expect(f.field063Idx).toBe(7)

        f = CommonFieldFR.fromNotation('h1')
        expect(f.isOnBoard).toBe(true)
        expect(f.file).toBe('h')
        expect(f.rank).toBe(1)
        expect(f.notation).toBe('h1')
        expect(f.fileIdx).toBe(7)
        expect(f.rankIdx).toBe(7)
        expect(f.field063Idx).toBe(63)

        f = CommonFieldFR.fromFieldIdx(7, 7)
        expect(f.isOnBoard).toBe(true)
        expect(f.file).toBe('h')
        expect(f.rank).toBe(1)
        expect(f.notation).toBe('h1')
        expect(f.fileIdx).toBe(7)
        expect(f.rankIdx).toBe(7)
        expect(f.field063Idx).toBe(63)

        f = CommonFieldFR.fromField063Idx(56)
        expect(f.isOnBoard).toBe(true)
        expect(f.file).toBe('a')
        expect(f.rank).toBe(1)
        expect(f.notation).toBe('a1')
        expect(f.fileIdx).toBe(0)
        expect(f.rankIdx).toBe(7)
        expect(f.field063Idx).toBe(56)

        f = CommonFieldFR.fromField063Idx(63)
        expect(f.isOnBoard).toBe(true)
        expect(f.file).toBe('h')
        expect(f.rank).toBe(1)
        expect(f.fieldN).toMatchObject({ file: 'h', rank: 1 })
        expect(f.notation).toBe('h1')
        expect(f.fileIdx).toBe(7)
        expect(f.rankIdx).toBe(7)
        expect(f.fieldIdx).toMatchObject({ fileIdx: 7, rankIdx: 7 })
        expect(f.field063Idx).toBe(63)
    })

    test('testing CommonFieldFR (Error handling)', () => {
        let f = new CommonFieldFR()
        expect(f.isOnBoard).toBe(false)
        expect(() => f.file).toThrowError(Error)
        expect(() => f.rank).toThrowError(Error)
        expect(() => f.fieldN).toThrowError(Error)
        expect(() => f.notation).toThrowError(Error)
        expect(() => f.fileIdx).toThrowError(Error)
        expect(() => f.rankIdx).toThrowError(Error)
        expect(() => f.fieldIdx).toThrowError(Error)
        expect(() => f.field063Idx).toThrowError(Error)

        expect(new CommonFieldFR('x', 1).isOnBoard).toBe(false)
        expect(new CommonFieldFR('A', 1).isOnBoard).toBe(false)
        expect(new CommonFieldFR('2', 1).isOnBoard).toBe(false)
        expect(new CommonFieldFR('e', 0).isOnBoard).toBe(false)
        expect(new CommonFieldFR('e', 9).isOnBoard).toBe(false)
        expect(CommonFieldFR.fromFieldIdx(8, 0).isOnBoard).toBe(false)
        expect(CommonFieldFR.fromFieldIdx(0, 8).isOnBoard).toBe(false)
        expect(CommonFieldFR.fromFieldIdx(5, -1).isOnBoard).toBe(false)
        expect(CommonFieldFR.fromFieldIdx(-1, 4).isOnBoard).toBe(false)
        expect(CommonFieldFR.fromField063Idx(64).isOnBoard).toBe(false)
        expect(CommonFieldFR.fromField063Idx(-1).isOnBoard).toBe(false)
    })

    test('testing CommonFieldFR (comparing)', () => {
        let f1 = new CommonFieldFR()
        let f2 = new CommonFieldFR()
        expect(() => f1.same(f2)).toThrowError(Error)
        expect(() => f1.sameFR(f2.file, f2.rank)).toThrowError(Error)
        expect(() => f1.sameN(f2.fieldN)).toThrowError(Error)
        expect(() => f1.sameNotation(f2.notation)).toThrowError(Error)
        expect(() => f1.sameI(f2.fileIdx, f2.rankIdx)).toThrowError(Error)
        expect(() => f1.sameIdx(f2.fieldIdx)).toThrowError(Error)
        expect(() => f1.same063I(f2.field063Idx)).toThrowError(Error)

        f2 = CommonFieldFR.fromNotation('d4')
        expect(() => f1.same(f2)).toThrowError(Error)
        expect(() => f1.sameFR(f2.file, f2.rank)).toThrowError(Error)
        expect(() => f1.sameN(f2.fieldN)).toThrowError(Error)
        expect(() => f1.sameNotation(f2.notation)).toThrowError(Error)
        expect(() => f1.sameI(f2.fileIdx, f2.rankIdx)).toThrowError(Error)
        expect(() => f1.sameIdx(f2.fieldIdx)).toThrowError(Error)
        expect(() => f1.same063I(f2.field063Idx)).toThrowError(Error)

        f1 = CommonFieldFR.fromNotation('d4')
        f2 = new CommonFieldFR()
        expect(f1.same(f2)).toBe(false)
        expect(() => f1.sameFR(f2.file, f2.rank)).toThrowError(Error)
        expect(() => f1.sameN(f2.fieldN)).toThrowError(Error)
        expect(() => f1.sameNotation(f2.notation)).toThrowError(Error)
        expect(() => f1.sameI(f2.fileIdx, f2.rankIdx)).toThrowError(Error)
        expect(() => f1.sameIdx(f2.fieldIdx)).toThrowError(Error)
        expect(() => f1.same063I(f2.field063Idx)).toThrowError(Error)

        f1 = CommonFieldFR.fromNotation('d4')
        f2 = new CommonFieldFR(f1.file, f1.rank)
        expect(f1.same(f2)).toBe(true)
        expect(f1.sameFR(f2.file, f2.rank)).toBe(true)
        expect(f1.sameN(f2.fieldN)).toBe(true)
        expect(f1.sameNotation(f2.notation)).toBe(true)
        expect(f1.sameI(f2.fileIdx, f2.rankIdx)).toBe(true)
        expect(f1.sameIdx(f2.fieldIdx)).toBe(true)
        expect(f1.same063I(f2.field063Idx)).toBe(true)

        f1 = CommonFieldFR.fromNotation('a1')
        f2 = CommonFieldFR.fromNotation('a1')
        expect(f1.same(f2)).toBe(true)
        expect(f1.sameFR(f2.file, f2.rank)).toBe(true)
        expect(f1.sameN(f2.fieldN)).toBe(true)
        expect(f1.sameNotation(f2.notation)).toBe(true)
        expect(f1.sameI(f2.fileIdx, f2.rankIdx)).toBe(true)
        expect(f1.sameIdx(f2.fieldIdx)).toBe(true)
        expect(f1.same063I(f2.field063Idx)).toBe(true)
        f1 = CommonFieldFR.fromNotation('a1')
        f2 = CommonFieldFR.fromNotation('a2')
        expect(f1.same(f2)).toBe(false)
        expect(f1.sameFR(f2.file, f2.rank)).toBe(false)
        expect(f1.sameN(f2.fieldN)).toBe(false)
        expect(f1.sameNotation(f2.notation)).toBe(false)
        expect(f1.sameI(f2.fileIdx, f2.rankIdx)).toBe(false)
        expect(f1.sameIdx(f2.fieldIdx)).toBe(false)
        expect(f1.same063I(f2.field063Idx)).toBe(false)

        f1 = CommonFieldFR.fromNotation('a1')
        f2 = CommonFieldFR.fromField063Idx(56)
        expect(f1.same(f2)).toBe(true)
        expect(f1.sameFR(f2.file, f2.rank)).toBe(true)
        expect(f1.sameN(f2.fieldN)).toBe(true)
        expect(f1.sameNotation(f2.notation)).toBe(true)
        expect(f1.sameI(f2.fileIdx, f2.rankIdx)).toBe(true)
        expect(f1.sameIdx(f2.fieldIdx)).toBe(true)
        expect(f1.same063I(f2.field063Idx)).toBe(true)
        f1 = CommonFieldFR.fromNotation('a1')
        f2 = CommonFieldFR.fromField063Idx(54)
        expect(f1.same(f2)).toBe(false)
        expect(f1.sameFR(f2.file, f2.rank)).toBe(false)
        expect(f1.sameN(f2.fieldN)).toBe(false)
        expect(f1.sameNotation(f2.notation)).toBe(false)
        expect(f1.sameI(f2.fileIdx, f2.rankIdx)).toBe(false)
        expect(f1.sameIdx(f2.fieldIdx)).toBe(false)
        expect(f1.same063I(f2.field063Idx)).toBe(false)

        f1 = CommonFieldFR.fromNotation('a1')
        f2 = CommonFieldFR.fromFieldIdx(0, 7)
        expect(f1.same(f2)).toBe(true)
        expect(f1.sameFR(f2.file, f2.rank)).toBe(true)
        expect(f1.sameN(f2.fieldN)).toBe(true)
        expect(f1.sameNotation(f2.notation)).toBe(true)
        expect(f1.sameI(f2.fileIdx, f2.rankIdx)).toBe(true)
        expect(f1.sameIdx(f2.fieldIdx)).toBe(true)
        expect(f1.same063I(f2.field063Idx)).toBe(true)
        f1 = CommonFieldFR.fromNotation('a1')
        f2 = CommonFieldFR.fromFieldIdx(0, 6)
        expect(f1.same(f2)).toBe(false)
        expect(f1.sameFR(f2.file, f2.rank)).toBe(false)
        expect(f1.sameN(f2.fieldN)).toBe(false)
        expect(f1.sameNotation(f2.notation)).toBe(false)
        expect(f1.sameI(f2.fileIdx, f2.rankIdx)).toBe(false)
        expect(f1.sameIdx(f2.fieldIdx)).toBe(false)
        expect(f1.same063I(f2.field063Idx)).toBe(false)
    })
})