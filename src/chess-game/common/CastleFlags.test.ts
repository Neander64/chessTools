import { CastleFlags, castleType } from "./CastleFlags"
import { color } from "./chess-color"

describe('Testing CastleFlags', () => {

    test('testing for sideeffects in CastleFlags', () => {
        let c = new CastleFlags()
        c.setFlags(true, true, true, true)
        expect(c.canCastleShortBlack).toBe(true)
        expect(c.canCastleLongBlack).toBe(true)
        expect(c.canCastleShortWhite).toBe(true)
        expect(c.canCastleLongWhite).toBe(true)
        expect(c.hasNoCastleOption).toBe(false)
        expect(c.getCastleFlag(color.black, castleType.short)).toBe(true)
        expect(c.getCastleFlag(color.black, castleType.long)).toBe(true)
        expect(c.getCastleFlag(color.white, castleType.short)).toBe(true)
        expect(c.getCastleFlag(color.white, castleType.long)).toBe(true)
        let c1 = new CastleFlags(c)
        expect(c1.canCastleShortBlack).toBe(true)
        expect(c1.canCastleLongBlack).toBe(true)
        expect(c1.canCastleShortWhite).toBe(true)
        expect(c1.canCastleLongWhite).toBe(true)

        c.setFlags(false, false, false, false)
        expect(c.canCastleShortBlack).toBe(false)
        expect(c.canCastleLongBlack).toBe(false)
        expect(c.canCastleShortWhite).toBe(false)
        expect(c.canCastleLongWhite).toBe(false)
        expect(c.hasNoCastleOption).toBe(true)
        expect(c.getCastleFlag(color.black, castleType.short)).toBe(false)
        expect(c.getCastleFlag(color.black, castleType.long)).toBe(false)
        expect(c.getCastleFlag(color.white, castleType.short)).toBe(false)
        expect(c.getCastleFlag(color.white, castleType.long)).toBe(false)
        expect(c1.canCastleShortBlack).toBe(true)
        expect(c1.canCastleLongBlack).toBe(true)
        expect(c1.canCastleShortWhite).toBe(true)
        expect(c1.canCastleLongWhite).toBe(true)

        c.setCastleFlag(color.black, castleType.short, true)
        expect(c.canCastleShortBlack).toBe(true)
        expect(c.canCastleLongBlack).toBe(false)
        expect(c.canCastleShortWhite).toBe(false)
        expect(c.canCastleLongWhite).toBe(false)
        expect(c.hasNoCastleOption).toBe(false)
        c.setCastleFlag(color.black, castleType.short, false)

        c.setCastleFlag(color.black, castleType.long, true)
        expect(c.canCastleShortBlack).toBe(false)
        expect(c.canCastleLongBlack).toBe(true)
        expect(c.canCastleShortWhite).toBe(false)
        expect(c.canCastleLongWhite).toBe(false)
        expect(c.hasNoCastleOption).toBe(false)
        c.setCastleFlag(color.black, castleType.long, false)

        c.setCastleFlag(color.white, castleType.short, true)
        expect(c.canCastleShortBlack).toBe(false)
        expect(c.canCastleLongBlack).toBe(false)
        expect(c.canCastleShortWhite).toBe(true)
        expect(c.canCastleLongWhite).toBe(false)
        expect(c.hasNoCastleOption).toBe(false)
        c.setCastleFlag(color.white, castleType.short, false)

        c.setCastleFlag(color.white, castleType.long, true)
        expect(c.canCastleShortBlack).toBe(false)
        expect(c.canCastleLongBlack).toBe(false)
        expect(c.canCastleShortWhite).toBe(false)
        expect(c.canCastleLongWhite).toBe(true)
        expect(c.hasNoCastleOption).toBe(false)
        c.setCastleFlag(color.white, castleType.long, false)



        expect(c1.canCastleShortBlack).toBe(true)
        expect(c1.canCastleLongBlack).toBe(true)
        expect(c1.canCastleShortWhite).toBe(true)
        expect(c1.canCastleLongWhite).toBe(true)
        c1.noCastle(color.black)
        expect(c1.canCastleShortBlack).toBe(false)
        expect(c1.canCastleLongBlack).toBe(false)
        expect(c1.canCastleShortWhite).toBe(true)
        expect(c1.canCastleLongWhite).toBe(true)
        expect(c1.hasNoCastleOption).toBe(false)

        c1.noCastle(color.white)
        expect(c1.canCastleShortBlack).toBe(false)
        expect(c1.canCastleLongBlack).toBe(false)
        expect(c1.canCastleShortWhite).toBe(false)
        expect(c1.canCastleLongWhite).toBe(false)
        expect(c1.hasNoCastleOption).toBe(true)
    })
})
